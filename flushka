#!/usr/bin/env lua

function read_file (path)
    if not io.open(path, "rb") then
	error (("ERROR: %s not found"):format(path))
    end

    lines = ""
    for line in io.lines(path) do
	lines = lines .. line .. "\n"
    end
    io.close()
    return lines
end

function trim(string)
    return string:match("^%s*(.-)%s*$")
    -- (.-) avoids greediness, specific to lua
end

function parse_card(input_string)
    -- Parse functions return (bool,end_index,string_parsed)
    -- with bool = found what we are looking for
    -- end_index = location from which to parse if found it
    -- string_parsed = parsed_string/themes
    local input_string = trim(input_string)
    local themes = parse_themes(input_string)

    local pq     = parse_header(input_string, "=Q=")
    local fq, siq, eiq = pq["found"], pq["start_index"], pq["end_index"]

    local pa     = parse_header(input_string, "=A=")
    local fa, sia, eia = pa["found"], pa["start_index"], pa["end_index"]

    if (not fq) then error "ERROR: Card doesn't contain question." end
    if (not fa) then error "ERROR: Card doesn't contain answer."   end

    local question = trim(input_string:sub(eiq, sia))
    local answer   = trim(input_string:sub(eia, #input_string))


    if (trim(question) == "") then error "ERROR: Question is empty." end
    if (trim(answer) == "")   then error "ERROR: Answer is empty."   end

    return { themes = themes, question = question, answer = answer, raw = rebuild_for_db(themes,question,answer)}
end

function rebuild_for_db(themes,question,answer)
    return themes["raw"] .. "\n=Q=\n" .. question .. "\n=A=\n" .. answer
end

function parse_header (input_string, header)
    for i = 1, #input_string do
	if ( input_string:sub(i,#header + 1) == header .. "\n"
	    or input_string:sub(i,#header + i + 1) == "\n" .. header .. "\n")
	    then
		local end_index = i + 1 + #header + 1
		local parsed_string = input_string:sub(i+1,#header+i)
		return { found = true,
			 start_index = end_index - #header - 1 - 1,
			 end_index = end_index,
			 parsed_string = parsed_string,
		       }
	end
    end
    return { found = false,
	     start_index = -1,
	     end_index = -1,
	     parsed_string = ""
	   }
end

function parse_themes (input_string)
    local themes = {}
    if (input_string:sub(1,1) == "#") then
	local current_theme = ""
	for i=2, #input_string do
	    local current_char = input_string:sub(i,i)
	    if (current_char == "\n") then
		if (#trim(current_theme) > 0) then
		    themes[#themes+1] = trim(current_theme)
		end
		raw_themes = "#"
		for t=1,#themes do
		    raw_themes = raw_themes .. "," .. themes[t]
		end
		return { found = true,
		         start_index = 1,
			 end_index = i + 1,
			 parsed_string = themes,
			 raw = raw_themes
		       }
	    end
	    if (current_char == ",") then
		if (#trim(current_theme) > 0) then
		    themes[#themes+1] = trim(current_theme)
		end
		current_theme = ""
	    else
		current_theme = current_theme .. current_char
	    end
	end
    end
    return { found = false,
	     start_index = 1,
	     end_index = 1,
	     parsed_string = "",
	     raw = "#"
	   }
end

function display(card)
	clear_screen()
	play(card)
	rebox(card)
end

function display_question(card)
    local question = card["question"]
    print("Q > ", question)
end

function display_answer(card)
    local answer = card["answer"]
    print("A > ", answer)
end

function split_and_trim_cards(input_string)
    sep = "-----"
    local cards = {}
    local current_card = ""

    while (#input_string ~= 0) do
	if (input_string:sub(1,#sep) == sep) then
	    if (current_card ~= "") then
		cards[#cards + 1] = current_card
	    end
	    input_string = input_string:sub(#sep + 1,#input_string)
	    current_card = ""
	else
	    current_card = current_card .. input_string:sub(1,1)
	    input_string = input_string:sub(2,#input_string)
	end
    end

    if (trim(current_card) ~= "") then
	cards[#cards + 1] = trim(current_card)
    end

    return cards
end

function play(card)
    display_question(card)

    -- Pressing Enter is forced (no stock key press handling in Lua)
    local user_pressed_key
    while (user_pressed_key == nil) do
	user_pressed_key = io.read()
    end
    display_answer(card)
    print("-----------")
end

function score(card)
    local evaluate
    repeat
	io.write("\27[1A\27[K") -- move one line up and erase line
	io.write("did you guess right? (y/n) ")
	answer=io.read()
    until answer=="y" or answer=="n"

    -- TODO: classify_card(card, "wrong"/"right")
    local score
    if (answer == "y") then score = 1 else score = 0 end
    -- classify_card(card, score)
    return score
end

function clear_screen ()
    io.write("\027[H\027[2J")
end

function shuffle(cards)
    local shuffled = {}
    while #cards > 0 do
	shuffled[#shuffled+1] = table.remove(cards,math.random(#cards))
    end
    return shuffled
end

function rebox(card)
    -- Store card in suitable box --
    if score(card) == 0 or not boxes[card] then
	boxes[card] = 1 -- card is stored in box 1
    else
	boxes[card] = boxes[card] + 1
    end
end

function select_random_box()
    -- Boxes have probabilities following this logic:
    -- for n boxes labeled from n to 1 (hardest to easiest)
    -- each box's probability is equal to : n / (n + (n-1) + ... + 1)
    for i=1,max_boxes do
	if math.random() <= boxes_probas[i] then
	    return i
	end
    end
end

function generate_boxes_probas(max_boxes)
    function sum_range(a,b)
	local sum = 0
	for i = a, b do
	    sum = sum + i
	end
	return sum
    end
    local sum = sum_range(1,max_boxes)
    local box_probs = {}
    for i=1,max_boxes do
	local box_prob = (max_boxes - (i - 1)) / sum
	for j=i, max_boxes do
	    if box_probs[j] == nil then
		box_probs[j] = box_prob
	    else
		box_probs[j] = box_probs[j] + box_prob
	    end
	end
    end
    return box_probs
end

function select_random_card_from_box(box)
    local cards_from_this_box = {}
    for c,b in pairs(boxes) do
	if b == box then
	    table.insert(cards_from_this_box,c)
	end
    end
    if #cards_from_this_box == 0 then return nil end
    return cards_from_this_box[math.random(#cards_from_this_box)]
end

function database_write(db_path,card)
    -- DUMB: We replace the whole file while
    --       it would be better to replace
    --       only where needed
    local db = io.open(db_path, "a")
    db:write("@BOX_" .. boxes[card] .. "=>" .. card["raw"] .. "\n")
    --for card,box in pairs(boxes) do
    --    db:write("@BOX_" .. box .. "=>" .. card["raw"] .. "\n")
    --end
    db:close()
end

function database_get_box_and_content(db_line)
    local card_box = db_line:match("^@BOX_(%d+)=>")
    local card_content = db_line:gsub("^(@BOX_%d+=>)(.*)", "%2")
    return card_box, card_content
end

function database_read(db_path)
    if not io.open(db_path, "rb") then
	print("INFO: Creating `" .. db_path .. "` database.")
	local db = io.open(db_path, "w")
	db:close()
	return
    end
    local db = io.open(db_path, "r")
    local current_card = ""
    local box_pattern = "@BOX_"
    -- TODO: parse database
    for line in io.lines(db_path) do
	if line:sub(1, #box_pattern) == box_pattern and current_card ~= "" then
	    local card_box, card_content = database_get_box_and_content(current_card)
	    boxes[parse_card(card_content)] = card_box
	    current_card = line .. "\n"
	else
	    current_card = current_card .. line .. "\n"
	end
    end
    if current_card ~= "" then
	local card_box, card_content = database_get_box_and_content(current_card)
	boxes[parse_card(card_content)] = card_box
    end
    db:close()
end

function card_in_database(card)
    for c,_ in pairs(boxes) do
	--print(c["raw"], "************", card["raw"])
	if c["raw"] == card["raw"] then
	    return true
	end
    end
    return false
end

function main ()
    if (#arg == 0) then
        error "ERROR: No input provided."
    end

    local filepath = arg[1]

    local content  = read_file(filepath)
    -- Split if is a multicard file --
    cards = split_and_trim_cards(content)
    cards = shuffle(cards)

    boxes = {}
    max_boxes = 4 -- No more than x boxes
    boxes_probas = generate_boxes_probas(max_boxes)

    database_path = "db_flushka"
    database_read(database_path) -- TODO: import database
    -- TODO: check that imported labels <= max_boxes

    -- Start by cards that aren't already in database --
    for i=1, #cards do
    	local card = parse_card(cards[i])
	if card_in_database(card) then
	    goto continue
	end
        display(card)
	database_write(database_path, card)
        ::continue::
    end
    os.exit()

    -- Play game --
    while 1 do
	local box  = select_random_box()
	local card = select_random_card_from_box(box)
	if card == nil then goto continue end
	display(card)
	database_write(database_path)
	::continue::
    end
end

main()
